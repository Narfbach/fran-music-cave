// Chat functionalityconst chatMessages = document.getElementById('chatMessages');const chatUsername = document.getElementById('chatUsername');const chatUsernameDisplay = document.getElementById('chatUsernameDisplay');const chatMessage = document.getElementById('chatMessage');const chatSend = document.getElementById('chatSend');const chatToggle = document.getElementById('chatToggle');const chatSection = document.getElementById('chatSection');// Store current user datalet currentChatUser = null;// Wait for auth and setup chat usernamesetTimeout(() => { const auth = window.firebaseAuth; if (auth && auth.currentUser) { setupChatUser(auth.currentUser); } // Listen for auth changes if (window.firebaseAuth) { window.firebaseAuth.onAuthStateChanged((user) => { if (user) { setupChatUser(user); } else { // Not logged in - show input field chatUsername.style.display = 'block'; chatUsernameDisplay.style.display = 'none'; currentChatUser = null; } }); }}, 1000);async function setupChatUser(user) { try { // Get user data from Firestore const userDoc = await window.chatGetDoc(window.chatDoc(window.chatDb, 'users', user.uid)); if (userDoc.exists()) { const userData = userDoc.data(); const username = user.displayName || user.email.split('@')[0]; // Store user data for chat currentChatUser = { username: username.toUpperCase(), isAdmin: userData.isAdmin || false, userId: user.uid }; // Hide input field, show display with neon effect chatUsername.style.display = 'none'; chatUsernameDisplay.style.display = 'block'; chatUsernameDisplay.textContent = currentChatUser.username; // Apply neon glow based on admin status if (currentChatUser.isAdmin) { chatUsernameDisplay.style.color = '#ff3366'; chatUsernameDisplay.style.textShadow = '0 0 7px #ff3366, 0 0 10px #ff3366, 0 0 21px #ff3366, 0 0 42px #ff0044'; } else { chatUsernameDisplay.style.color = '#fff'; chatUsernameDisplay.style.textShadow = '0 0 7px #fff, 0 0 10px #fff, 0 0 21px #fff, 0 0 42px #ccc'; } } } catch (error) { console.error('Error setting up chat user:', error); }}// Toggle chat minimize/maximizechatToggle.addEventListener('click', () => { chatSection.classList.toggle('minimized'); chatToggle.textContent = chatSection.classList.contains('minimized') ? '+' : '—';});// Función para formatear tiempofunction formatTime(timestamp) { if (!timestamp) return ''; const date = timestamp.toDate(); const hours = date.getHours().toString().padStart(2, '0'); const minutes = date.getMinutes().toString().padStart(2, '0'); return `${hours}:${minutes}`;}// Función para agregar mensaje al DOMfunction addMessageToDOM(username, message, timestamp, isAdmin = false) { const messageDiv = document.createElement('div'); messageDiv.className = 'chat-message'; // Apply neon glow based on admin status let userColor, userShadow; if (isAdmin) { userColor = '#ff3366'; userShadow = '0 0 7px #ff3366, 0 0 10px #ff3366, 0 0 21px #ff3366, 0 0 42px #ff0044'; } else { userColor = '#fff'; userShadow = '0 0 7px #fff, 0 0 10px #fff, 0 0 21px #fff, 0 0 42px #ccc'; } messageDiv.innerHTML = ` <div class="chat-message-user" style="color: ${userColor}; text-shadow: ${userShadow}">${username}</div> <div class="chat-message-text">${message}</div> <div class="chat-message-time">${formatTime(timestamp)}</div> `; chatMessages.appendChild(messageDiv); chatMessages.scrollTop = chatMessages.scrollHeight;}// Función para enviar mensajeasync function sendMessage() { let username; // Check if user is logged in if (currentChatUser) { username = currentChatUser.username; } else { username = chatUsername.value.trim().toUpperCase(); if (!username) { alert('Por favor ingresa tu nick'); chatUsername.focus(); return; } } const message = chatMessage.value.trim(); if (!message) { return; } if (!window.chatDb) { alert('Firebase no está configurado. Por favor sigue las instrucciones en firebase-config.js'); return; } try { // Limpiar el campo ANTES de enviar const messageText = message; chatMessage.value = ''; await window.chatAddDoc(window.chatCollection(window.chatDb, 'messages'), { username: username, message: messageText, timestamp: window.chatServerTimestamp(), userId: currentChatUser ? currentChatUser.userId : null, isAdmin: currentChatUser ? currentChatUser.isAdmin : false }); chatMessage.focus(); } catch (error) { console.error('Error al enviar mensaje:', error); alert('Error al enviar mensaje. Verifica que Firebase esté configurado correctamente.'); // Si hay error, devolver el mensaje al campo chatMessage.value = message; }}// Event listeners para enviar mensajechatSend.addEventListener('click', sendMessage);chatMessage.addEventListener('keypress', (e) => { if (e.key === 'Enter') { sendMessage(); }});// Escuchar mensajes en tiempo realfunction startListeningToMessages() { if (!window.chatDb) { console.log('Esperando configuración de Firebase...'); setTimeout(startListeningToMessages, 1000); return; } try { const messagesRef = window.chatCollection(window.chatDb, 'messages'); const q = window.chatQuery( messagesRef, window.chatOrderBy('timestamp', 'desc'), window.chatLimit(50) ); window.chatOnSnapshot(q, (snapshot) => { chatMessages.innerHTML = ''; const messages = []; snapshot.forEach((doc) => { messages.push(doc.data()); }); // Mostrar en orden cronológico (inverso a como vienen) messages.reverse().forEach((data) => { addMessageToDOM(data.username, data.message, data.timestamp, data.isAdmin || false); }); }); } catch (error) { console.error('Error al escuchar mensajes:', error); }}// Iniciar escucha de mensajes cuando la página carguewindow.addEventListener('load', () => { setTimeout(startListeningToMessages, 500);});